// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/basal-middleware/pkg/db/ent/api"
	"github.com/NpoolPlatform/basal-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// APIUpdate is the builder for updating API entities.
type APIUpdate struct {
	config
	hooks     []Hook
	mutation  *APIMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the APIUpdate builder.
func (au *APIUpdate) Where(ps ...predicate.API) *APIUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *APIUpdate) SetCreatedAt(u uint32) *APIUpdate {
	au.mutation.ResetCreatedAt()
	au.mutation.SetCreatedAt(u)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *APIUpdate) SetNillableCreatedAt(u *uint32) *APIUpdate {
	if u != nil {
		au.SetCreatedAt(*u)
	}
	return au
}

// AddCreatedAt adds u to the "created_at" field.
func (au *APIUpdate) AddCreatedAt(u int32) *APIUpdate {
	au.mutation.AddCreatedAt(u)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *APIUpdate) SetUpdatedAt(u uint32) *APIUpdate {
	au.mutation.ResetUpdatedAt()
	au.mutation.SetUpdatedAt(u)
	return au
}

// AddUpdatedAt adds u to the "updated_at" field.
func (au *APIUpdate) AddUpdatedAt(u int32) *APIUpdate {
	au.mutation.AddUpdatedAt(u)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *APIUpdate) SetDeletedAt(u uint32) *APIUpdate {
	au.mutation.ResetDeletedAt()
	au.mutation.SetDeletedAt(u)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *APIUpdate) SetNillableDeletedAt(u *uint32) *APIUpdate {
	if u != nil {
		au.SetDeletedAt(*u)
	}
	return au
}

// AddDeletedAt adds u to the "deleted_at" field.
func (au *APIUpdate) AddDeletedAt(u int32) *APIUpdate {
	au.mutation.AddDeletedAt(u)
	return au
}

// SetEntID sets the "ent_id" field.
func (au *APIUpdate) SetEntID(u uuid.UUID) *APIUpdate {
	au.mutation.SetEntID(u)
	return au
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (au *APIUpdate) SetNillableEntID(u *uuid.UUID) *APIUpdate {
	if u != nil {
		au.SetEntID(*u)
	}
	return au
}

// SetProtocol sets the "protocol" field.
func (au *APIUpdate) SetProtocol(s string) *APIUpdate {
	au.mutation.SetProtocol(s)
	return au
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (au *APIUpdate) SetNillableProtocol(s *string) *APIUpdate {
	if s != nil {
		au.SetProtocol(*s)
	}
	return au
}

// ClearProtocol clears the value of the "protocol" field.
func (au *APIUpdate) ClearProtocol() *APIUpdate {
	au.mutation.ClearProtocol()
	return au
}

// SetServiceName sets the "service_name" field.
func (au *APIUpdate) SetServiceName(s string) *APIUpdate {
	au.mutation.SetServiceName(s)
	return au
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (au *APIUpdate) SetNillableServiceName(s *string) *APIUpdate {
	if s != nil {
		au.SetServiceName(*s)
	}
	return au
}

// ClearServiceName clears the value of the "service_name" field.
func (au *APIUpdate) ClearServiceName() *APIUpdate {
	au.mutation.ClearServiceName()
	return au
}

// SetMethod sets the "method" field.
func (au *APIUpdate) SetMethod(s string) *APIUpdate {
	au.mutation.SetMethod(s)
	return au
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (au *APIUpdate) SetNillableMethod(s *string) *APIUpdate {
	if s != nil {
		au.SetMethod(*s)
	}
	return au
}

// ClearMethod clears the value of the "method" field.
func (au *APIUpdate) ClearMethod() *APIUpdate {
	au.mutation.ClearMethod()
	return au
}

// SetMethodName sets the "method_name" field.
func (au *APIUpdate) SetMethodName(s string) *APIUpdate {
	au.mutation.SetMethodName(s)
	return au
}

// SetNillableMethodName sets the "method_name" field if the given value is not nil.
func (au *APIUpdate) SetNillableMethodName(s *string) *APIUpdate {
	if s != nil {
		au.SetMethodName(*s)
	}
	return au
}

// ClearMethodName clears the value of the "method_name" field.
func (au *APIUpdate) ClearMethodName() *APIUpdate {
	au.mutation.ClearMethodName()
	return au
}

// SetPath sets the "path" field.
func (au *APIUpdate) SetPath(s string) *APIUpdate {
	au.mutation.SetPath(s)
	return au
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (au *APIUpdate) SetNillablePath(s *string) *APIUpdate {
	if s != nil {
		au.SetPath(*s)
	}
	return au
}

// ClearPath clears the value of the "path" field.
func (au *APIUpdate) ClearPath() *APIUpdate {
	au.mutation.ClearPath()
	return au
}

// SetExported sets the "exported" field.
func (au *APIUpdate) SetExported(b bool) *APIUpdate {
	au.mutation.SetExported(b)
	return au
}

// SetNillableExported sets the "exported" field if the given value is not nil.
func (au *APIUpdate) SetNillableExported(b *bool) *APIUpdate {
	if b != nil {
		au.SetExported(*b)
	}
	return au
}

// ClearExported clears the value of the "exported" field.
func (au *APIUpdate) ClearExported() *APIUpdate {
	au.mutation.ClearExported()
	return au
}

// SetPathPrefix sets the "path_prefix" field.
func (au *APIUpdate) SetPathPrefix(s string) *APIUpdate {
	au.mutation.SetPathPrefix(s)
	return au
}

// SetNillablePathPrefix sets the "path_prefix" field if the given value is not nil.
func (au *APIUpdate) SetNillablePathPrefix(s *string) *APIUpdate {
	if s != nil {
		au.SetPathPrefix(*s)
	}
	return au
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (au *APIUpdate) ClearPathPrefix() *APIUpdate {
	au.mutation.ClearPathPrefix()
	return au
}

// SetDomains sets the "domains" field.
func (au *APIUpdate) SetDomains(s []string) *APIUpdate {
	au.mutation.SetDomains(s)
	return au
}

// ClearDomains clears the value of the "domains" field.
func (au *APIUpdate) ClearDomains() *APIUpdate {
	au.mutation.ClearDomains()
	return au
}

// SetDeprecated sets the "deprecated" field.
func (au *APIUpdate) SetDeprecated(b bool) *APIUpdate {
	au.mutation.SetDeprecated(b)
	return au
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (au *APIUpdate) SetNillableDeprecated(b *bool) *APIUpdate {
	if b != nil {
		au.SetDeprecated(*b)
	}
	return au
}

// ClearDeprecated clears the value of the "deprecated" field.
func (au *APIUpdate) ClearDeprecated() *APIUpdate {
	au.mutation.ClearDeprecated()
	return au
}

// Mutation returns the APIMutation object of the builder.
func (au *APIUpdate) Mutation() *APIMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *APIUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := au.defaults(); err != nil {
		return 0, err
	}
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *APIUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *APIUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *APIUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *APIUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if api.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized api.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := api.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *APIUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *APIUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *APIUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   api.Table,
			Columns: api.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: api.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: api.FieldEntID,
		})
	}
	if value, ok := au.mutation.Protocol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldProtocol,
		})
	}
	if au.mutation.ProtocolCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldProtocol,
		})
	}
	if value, ok := au.mutation.ServiceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldServiceName,
		})
	}
	if au.mutation.ServiceNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldServiceName,
		})
	}
	if value, ok := au.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldMethod,
		})
	}
	if au.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldMethod,
		})
	}
	if value, ok := au.mutation.MethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldMethodName,
		})
	}
	if au.mutation.MethodNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldMethodName,
		})
	}
	if value, ok := au.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPath,
		})
	}
	if au.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldPath,
		})
	}
	if value, ok := au.mutation.Exported(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldExported,
		})
	}
	if au.mutation.ExportedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: api.FieldExported,
		})
	}
	if value, ok := au.mutation.PathPrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPathPrefix,
		})
	}
	if au.mutation.PathPrefixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldPathPrefix,
		})
	}
	if value, ok := au.mutation.Domains(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: api.FieldDomains,
		})
	}
	if au.mutation.DomainsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: api.FieldDomains,
		})
	}
	if value, ok := au.mutation.Deprecated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldDeprecated,
		})
	}
	if au.mutation.DeprecatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: api.FieldDeprecated,
		})
	}
	_spec.Modifiers = au.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// APIUpdateOne is the builder for updating a single API entity.
type APIUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *APIMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (auo *APIUpdateOne) SetCreatedAt(u uint32) *APIUpdateOne {
	auo.mutation.ResetCreatedAt()
	auo.mutation.SetCreatedAt(u)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableCreatedAt(u *uint32) *APIUpdateOne {
	if u != nil {
		auo.SetCreatedAt(*u)
	}
	return auo
}

// AddCreatedAt adds u to the "created_at" field.
func (auo *APIUpdateOne) AddCreatedAt(u int32) *APIUpdateOne {
	auo.mutation.AddCreatedAt(u)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *APIUpdateOne) SetUpdatedAt(u uint32) *APIUpdateOne {
	auo.mutation.ResetUpdatedAt()
	auo.mutation.SetUpdatedAt(u)
	return auo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (auo *APIUpdateOne) AddUpdatedAt(u int32) *APIUpdateOne {
	auo.mutation.AddUpdatedAt(u)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *APIUpdateOne) SetDeletedAt(u uint32) *APIUpdateOne {
	auo.mutation.ResetDeletedAt()
	auo.mutation.SetDeletedAt(u)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableDeletedAt(u *uint32) *APIUpdateOne {
	if u != nil {
		auo.SetDeletedAt(*u)
	}
	return auo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (auo *APIUpdateOne) AddDeletedAt(u int32) *APIUpdateOne {
	auo.mutation.AddDeletedAt(u)
	return auo
}

// SetEntID sets the "ent_id" field.
func (auo *APIUpdateOne) SetEntID(u uuid.UUID) *APIUpdateOne {
	auo.mutation.SetEntID(u)
	return auo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableEntID(u *uuid.UUID) *APIUpdateOne {
	if u != nil {
		auo.SetEntID(*u)
	}
	return auo
}

// SetProtocol sets the "protocol" field.
func (auo *APIUpdateOne) SetProtocol(s string) *APIUpdateOne {
	auo.mutation.SetProtocol(s)
	return auo
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableProtocol(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetProtocol(*s)
	}
	return auo
}

// ClearProtocol clears the value of the "protocol" field.
func (auo *APIUpdateOne) ClearProtocol() *APIUpdateOne {
	auo.mutation.ClearProtocol()
	return auo
}

// SetServiceName sets the "service_name" field.
func (auo *APIUpdateOne) SetServiceName(s string) *APIUpdateOne {
	auo.mutation.SetServiceName(s)
	return auo
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableServiceName(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetServiceName(*s)
	}
	return auo
}

// ClearServiceName clears the value of the "service_name" field.
func (auo *APIUpdateOne) ClearServiceName() *APIUpdateOne {
	auo.mutation.ClearServiceName()
	return auo
}

// SetMethod sets the "method" field.
func (auo *APIUpdateOne) SetMethod(s string) *APIUpdateOne {
	auo.mutation.SetMethod(s)
	return auo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableMethod(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetMethod(*s)
	}
	return auo
}

// ClearMethod clears the value of the "method" field.
func (auo *APIUpdateOne) ClearMethod() *APIUpdateOne {
	auo.mutation.ClearMethod()
	return auo
}

// SetMethodName sets the "method_name" field.
func (auo *APIUpdateOne) SetMethodName(s string) *APIUpdateOne {
	auo.mutation.SetMethodName(s)
	return auo
}

// SetNillableMethodName sets the "method_name" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableMethodName(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetMethodName(*s)
	}
	return auo
}

// ClearMethodName clears the value of the "method_name" field.
func (auo *APIUpdateOne) ClearMethodName() *APIUpdateOne {
	auo.mutation.ClearMethodName()
	return auo
}

// SetPath sets the "path" field.
func (auo *APIUpdateOne) SetPath(s string) *APIUpdateOne {
	auo.mutation.SetPath(s)
	return auo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillablePath(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetPath(*s)
	}
	return auo
}

// ClearPath clears the value of the "path" field.
func (auo *APIUpdateOne) ClearPath() *APIUpdateOne {
	auo.mutation.ClearPath()
	return auo
}

// SetExported sets the "exported" field.
func (auo *APIUpdateOne) SetExported(b bool) *APIUpdateOne {
	auo.mutation.SetExported(b)
	return auo
}

// SetNillableExported sets the "exported" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableExported(b *bool) *APIUpdateOne {
	if b != nil {
		auo.SetExported(*b)
	}
	return auo
}

// ClearExported clears the value of the "exported" field.
func (auo *APIUpdateOne) ClearExported() *APIUpdateOne {
	auo.mutation.ClearExported()
	return auo
}

// SetPathPrefix sets the "path_prefix" field.
func (auo *APIUpdateOne) SetPathPrefix(s string) *APIUpdateOne {
	auo.mutation.SetPathPrefix(s)
	return auo
}

// SetNillablePathPrefix sets the "path_prefix" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillablePathPrefix(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetPathPrefix(*s)
	}
	return auo
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (auo *APIUpdateOne) ClearPathPrefix() *APIUpdateOne {
	auo.mutation.ClearPathPrefix()
	return auo
}

// SetDomains sets the "domains" field.
func (auo *APIUpdateOne) SetDomains(s []string) *APIUpdateOne {
	auo.mutation.SetDomains(s)
	return auo
}

// ClearDomains clears the value of the "domains" field.
func (auo *APIUpdateOne) ClearDomains() *APIUpdateOne {
	auo.mutation.ClearDomains()
	return auo
}

// SetDeprecated sets the "deprecated" field.
func (auo *APIUpdateOne) SetDeprecated(b bool) *APIUpdateOne {
	auo.mutation.SetDeprecated(b)
	return auo
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableDeprecated(b *bool) *APIUpdateOne {
	if b != nil {
		auo.SetDeprecated(*b)
	}
	return auo
}

// ClearDeprecated clears the value of the "deprecated" field.
func (auo *APIUpdateOne) ClearDeprecated() *APIUpdateOne {
	auo.mutation.ClearDeprecated()
	return auo
}

// Mutation returns the APIMutation object of the builder.
func (auo *APIUpdateOne) Mutation() *APIMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *APIUpdateOne) Select(field string, fields ...string) *APIUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated API entity.
func (auo *APIUpdateOne) Save(ctx context.Context) (*API, error) {
	var (
		err  error
		node *API
	)
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*API)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from APIMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *APIUpdateOne) SaveX(ctx context.Context) *API {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *APIUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *APIUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *APIUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if api.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized api.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := api.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *APIUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *APIUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *APIUpdateOne) sqlSave(ctx context.Context) (_node *API, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   api.Table,
			Columns: api.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: api.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "API.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, api.FieldID)
		for _, f := range fields {
			if !api.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != api.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: api.FieldEntID,
		})
	}
	if value, ok := auo.mutation.Protocol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldProtocol,
		})
	}
	if auo.mutation.ProtocolCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldProtocol,
		})
	}
	if value, ok := auo.mutation.ServiceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldServiceName,
		})
	}
	if auo.mutation.ServiceNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldServiceName,
		})
	}
	if value, ok := auo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldMethod,
		})
	}
	if auo.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldMethod,
		})
	}
	if value, ok := auo.mutation.MethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldMethodName,
		})
	}
	if auo.mutation.MethodNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldMethodName,
		})
	}
	if value, ok := auo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPath,
		})
	}
	if auo.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldPath,
		})
	}
	if value, ok := auo.mutation.Exported(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldExported,
		})
	}
	if auo.mutation.ExportedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: api.FieldExported,
		})
	}
	if value, ok := auo.mutation.PathPrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPathPrefix,
		})
	}
	if auo.mutation.PathPrefixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldPathPrefix,
		})
	}
	if value, ok := auo.mutation.Domains(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: api.FieldDomains,
		})
	}
	if auo.mutation.DomainsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: api.FieldDomains,
		})
	}
	if value, ok := auo.mutation.Deprecated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldDeprecated,
		})
	}
	if auo.mutation.DeprecatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: api.FieldDeprecated,
		})
	}
	_spec.Modifiers = auo.modifiers
	_node = &API{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
