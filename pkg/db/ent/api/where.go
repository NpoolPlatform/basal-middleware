// Code generated by ent, DO NOT EDIT.

package api

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/basal-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Protocol applies equality check predicate on the "protocol" field. It's identical to ProtocolEQ.
func Protocol(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProtocol), v))
	})
}

// ServiceName applies equality check predicate on the "service_name" field. It's identical to ServiceNameEQ.
func ServiceName(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceName), v))
	})
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodName applies equality check predicate on the "method_name" field. It's identical to MethodNameEQ.
func MethodName(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethodName), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Exported applies equality check predicate on the "exported" field. It's identical to ExportedEQ.
func Exported(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExported), v))
	})
}

// PathPrefix applies equality check predicate on the "path_prefix" field. It's identical to PathPrefixEQ.
func PathPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPathPrefix), v))
	})
}

// Depracated applies equality check predicate on the "depracated" field. It's identical to DepracatedEQ.
func Depracated(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepracated), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProtocol), v))
	})
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProtocol), v))
	})
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProtocol), v...))
	})
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProtocol), v...))
	})
}

// ProtocolGT applies the GT predicate on the "protocol" field.
func ProtocolGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProtocol), v))
	})
}

// ProtocolGTE applies the GTE predicate on the "protocol" field.
func ProtocolGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProtocol), v))
	})
}

// ProtocolLT applies the LT predicate on the "protocol" field.
func ProtocolLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProtocol), v))
	})
}

// ProtocolLTE applies the LTE predicate on the "protocol" field.
func ProtocolLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProtocol), v))
	})
}

// ProtocolContains applies the Contains predicate on the "protocol" field.
func ProtocolContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProtocol), v))
	})
}

// ProtocolHasPrefix applies the HasPrefix predicate on the "protocol" field.
func ProtocolHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProtocol), v))
	})
}

// ProtocolHasSuffix applies the HasSuffix predicate on the "protocol" field.
func ProtocolHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProtocol), v))
	})
}

// ProtocolIsNil applies the IsNil predicate on the "protocol" field.
func ProtocolIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProtocol)))
	})
}

// ProtocolNotNil applies the NotNil predicate on the "protocol" field.
func ProtocolNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProtocol)))
	})
}

// ProtocolEqualFold applies the EqualFold predicate on the "protocol" field.
func ProtocolEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProtocol), v))
	})
}

// ProtocolContainsFold applies the ContainsFold predicate on the "protocol" field.
func ProtocolContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProtocol), v))
	})
}

// ServiceNameEQ applies the EQ predicate on the "service_name" field.
func ServiceNameEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceName), v))
	})
}

// ServiceNameNEQ applies the NEQ predicate on the "service_name" field.
func ServiceNameNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceName), v))
	})
}

// ServiceNameIn applies the In predicate on the "service_name" field.
func ServiceNameIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldServiceName), v...))
	})
}

// ServiceNameNotIn applies the NotIn predicate on the "service_name" field.
func ServiceNameNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldServiceName), v...))
	})
}

// ServiceNameGT applies the GT predicate on the "service_name" field.
func ServiceNameGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceName), v))
	})
}

// ServiceNameGTE applies the GTE predicate on the "service_name" field.
func ServiceNameGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceName), v))
	})
}

// ServiceNameLT applies the LT predicate on the "service_name" field.
func ServiceNameLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceName), v))
	})
}

// ServiceNameLTE applies the LTE predicate on the "service_name" field.
func ServiceNameLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceName), v))
	})
}

// ServiceNameContains applies the Contains predicate on the "service_name" field.
func ServiceNameContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServiceName), v))
	})
}

// ServiceNameHasPrefix applies the HasPrefix predicate on the "service_name" field.
func ServiceNameHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServiceName), v))
	})
}

// ServiceNameHasSuffix applies the HasSuffix predicate on the "service_name" field.
func ServiceNameHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServiceName), v))
	})
}

// ServiceNameIsNil applies the IsNil predicate on the "service_name" field.
func ServiceNameIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldServiceName)))
	})
}

// ServiceNameNotNil applies the NotNil predicate on the "service_name" field.
func ServiceNameNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldServiceName)))
	})
}

// ServiceNameEqualFold applies the EqualFold predicate on the "service_name" field.
func ServiceNameEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServiceName), v))
	})
}

// ServiceNameContainsFold applies the ContainsFold predicate on the "service_name" field.
func ServiceNameContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServiceName), v))
	})
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethod), v))
	})
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMethod), v...))
	})
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMethod), v...))
	})
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethod), v))
	})
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethod), v))
	})
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethod), v))
	})
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethod), v))
	})
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethod), v))
	})
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethod), v))
	})
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethod), v))
	})
}

// MethodIsNil applies the IsNil predicate on the "method" field.
func MethodIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMethod)))
	})
}

// MethodNotNil applies the NotNil predicate on the "method" field.
func MethodNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMethod)))
	})
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethod), v))
	})
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethod), v))
	})
}

// MethodNameEQ applies the EQ predicate on the "method_name" field.
func MethodNameEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethodName), v))
	})
}

// MethodNameNEQ applies the NEQ predicate on the "method_name" field.
func MethodNameNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethodName), v))
	})
}

// MethodNameIn applies the In predicate on the "method_name" field.
func MethodNameIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMethodName), v...))
	})
}

// MethodNameNotIn applies the NotIn predicate on the "method_name" field.
func MethodNameNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMethodName), v...))
	})
}

// MethodNameGT applies the GT predicate on the "method_name" field.
func MethodNameGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethodName), v))
	})
}

// MethodNameGTE applies the GTE predicate on the "method_name" field.
func MethodNameGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethodName), v))
	})
}

// MethodNameLT applies the LT predicate on the "method_name" field.
func MethodNameLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethodName), v))
	})
}

// MethodNameLTE applies the LTE predicate on the "method_name" field.
func MethodNameLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethodName), v))
	})
}

// MethodNameContains applies the Contains predicate on the "method_name" field.
func MethodNameContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethodName), v))
	})
}

// MethodNameHasPrefix applies the HasPrefix predicate on the "method_name" field.
func MethodNameHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethodName), v))
	})
}

// MethodNameHasSuffix applies the HasSuffix predicate on the "method_name" field.
func MethodNameHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethodName), v))
	})
}

// MethodNameIsNil applies the IsNil predicate on the "method_name" field.
func MethodNameIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMethodName)))
	})
}

// MethodNameNotNil applies the NotNil predicate on the "method_name" field.
func MethodNameNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMethodName)))
	})
}

// MethodNameEqualFold applies the EqualFold predicate on the "method_name" field.
func MethodNameEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethodName), v))
	})
}

// MethodNameContainsFold applies the ContainsFold predicate on the "method_name" field.
func MethodNameContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethodName), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPath)))
	})
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPath)))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// ExportedEQ applies the EQ predicate on the "exported" field.
func ExportedEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExported), v))
	})
}

// ExportedNEQ applies the NEQ predicate on the "exported" field.
func ExportedNEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExported), v))
	})
}

// ExportedIsNil applies the IsNil predicate on the "exported" field.
func ExportedIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExported)))
	})
}

// ExportedNotNil applies the NotNil predicate on the "exported" field.
func ExportedNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExported)))
	})
}

// PathPrefixEQ applies the EQ predicate on the "path_prefix" field.
func PathPrefixEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixNEQ applies the NEQ predicate on the "path_prefix" field.
func PathPrefixNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixIn applies the In predicate on the "path_prefix" field.
func PathPrefixIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPathPrefix), v...))
	})
}

// PathPrefixNotIn applies the NotIn predicate on the "path_prefix" field.
func PathPrefixNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPathPrefix), v...))
	})
}

// PathPrefixGT applies the GT predicate on the "path_prefix" field.
func PathPrefixGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixGTE applies the GTE predicate on the "path_prefix" field.
func PathPrefixGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixLT applies the LT predicate on the "path_prefix" field.
func PathPrefixLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixLTE applies the LTE predicate on the "path_prefix" field.
func PathPrefixLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixContains applies the Contains predicate on the "path_prefix" field.
func PathPrefixContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixHasPrefix applies the HasPrefix predicate on the "path_prefix" field.
func PathPrefixHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixHasSuffix applies the HasSuffix predicate on the "path_prefix" field.
func PathPrefixHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixIsNil applies the IsNil predicate on the "path_prefix" field.
func PathPrefixIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPathPrefix)))
	})
}

// PathPrefixNotNil applies the NotNil predicate on the "path_prefix" field.
func PathPrefixNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPathPrefix)))
	})
}

// PathPrefixEqualFold applies the EqualFold predicate on the "path_prefix" field.
func PathPrefixEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPathPrefix), v))
	})
}

// PathPrefixContainsFold applies the ContainsFold predicate on the "path_prefix" field.
func PathPrefixContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPathPrefix), v))
	})
}

// DomainsIsNil applies the IsNil predicate on the "domains" field.
func DomainsIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDomains)))
	})
}

// DomainsNotNil applies the NotNil predicate on the "domains" field.
func DomainsNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDomains)))
	})
}

// DepracatedEQ applies the EQ predicate on the "depracated" field.
func DepracatedEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepracated), v))
	})
}

// DepracatedNEQ applies the NEQ predicate on the "depracated" field.
func DepracatedNEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepracated), v))
	})
}

// DepracatedIsNil applies the IsNil predicate on the "depracated" field.
func DepracatedIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDepracated)))
	})
}

// DepracatedNotNil applies the NotNil predicate on the "depracated" field.
func DepracatedNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDepracated)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.API) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.API) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.API) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		p(s.Not())
	})
}
